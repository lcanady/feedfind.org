rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authorization and validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isProvider() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/providers/$(request.auth.uid));
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('.*@.*\\..*');
    }
    
    function isValidPhoneNumber(phone) {
      return phone is string && phone.matches('\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}');
    }
    
    function isValidCoordinates(lat, lng) {
      return lat is number && lng is number &&
             lat >= -90 && lat <= 90 &&
             lng >= -180 && lng <= 180;
    }
    
    // Rate limiting helper (basic implementation)
    function withinRateLimit() {
      return true; // TODO: Implement actual rate limiting logic
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && 
                           isOwner(userId) && 
                           withinRateLimit();
      
      allow create: if isAuthenticated() && 
                      isOwner(userId) &&
                      isValidUserData(resource.data);
      
      allow update: if isAuthenticated() && 
                      isOwner(userId) &&
                      isValidUserData(resource.data) &&
                      // Prevent role escalation
                      (!('role' in resource.data) || 
                       resource.data.role == 'user');
      
      function isValidUserData(data) {
        return data.keys().hasAll(['email', 'createdAt']) &&
               isValidEmail(data.email) &&
               data.createdAt is timestamp &&
               (!('role' in data) || data.role in ['user', 'provider']) &&
               (!('profile' in data) || isValidUserProfile(data.profile));
      }
      
      function isValidUserProfile(profile) {
        return (!('phone' in profile) || isValidPhoneNumber(profile.phone)) &&
               (!('preferences' in profile) || profile.preferences is map);
      }
    }
    
    // Providers collection - providers can manage their own data
    match /providers/{providerId} {
      allow read: if true; // Public read access for provider information
      
      allow create: if isAuthenticated() && 
                      isOwner(providerId) &&
                      isValidProviderData(resource.data);
      
      allow update: if isAuthenticated() && 
                      (isOwner(providerId) || isAdmin()) &&
                      isValidProviderData(resource.data);
      
      allow delete: if isAdmin(); // Only admins can delete providers
      
      function isValidProviderData(data) {
        return data.keys().hasAll(['organizationName', 'email', 'createdAt']) &&
               data.organizationName is string &&
               data.organizationName.size() > 0 &&
               data.organizationName.size() <= 100 &&
               isValidEmail(data.email) &&
               data.createdAt is timestamp &&
               (!('phone' in data) || isValidPhoneNumber(data.phone)) &&
               (!('isVerified' in data) || data.isVerified is bool) &&
               (!('status' in data) || data.status in ['pending', 'approved', 'suspended']);
      }
    }
    
    // Locations collection - public read, provider/admin write
    match /locations/{locationId} {
      allow read: if true; // Public read access for location search
      
      allow create: if isAuthenticated() && 
                      (isProvider() || isAdmin()) &&
                      isValidLocationData(resource.data);
      
      allow update: if isAuthenticated() && 
                      (isLocationOwner(resource.data.providerId) || isAdmin()) &&
                      isValidLocationData(resource.data) &&
                      // Prevent unauthorized status changes
                      (request.auth.uid == resource.data.providerId || 
                       resource.data.status == 'pending');
      
      allow delete: if isAdmin(); // Only admins can delete locations
      
      function isLocationOwner(providerId) {
        return isProvider() && request.auth.uid == providerId;
      }
      
      function isValidLocationData(data) {
        return data.keys().hasAll(['name', 'address', 'coordinates', 'providerId', 'status']) &&
               data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
               data.address is string && data.address.size() > 0 &&
               isValidCoordinates(data.coordinates.latitude, data.coordinates.longitude) &&
               data.providerId is string &&
               data.status in ['active', 'inactive', 'pending', 'suspended'] &&
               (!('operatingHours' in data) || data.operatingHours is map) &&
               (!('services' in data) || data.services is list) &&
               (!('currentStatus' in data) || data.currentStatus in ['open', 'closed', 'limited']);
      }
    }
    
    // Services collection - provider/admin write, public read
    match /services/{serviceId} {
      allow read: if true; // Public read access
      
      allow write: if isAuthenticated() && 
                     (isProvider() || isAdmin()) &&
                     isValidServiceData(resource.data);
      
      function isValidServiceData(data) {
        return data.keys().hasAll(['name', 'locationId', 'type']) &&
               data.name is string && data.name.size() > 0 &&
               data.locationId is string &&
               data.type in ['food_pantry', 'soup_kitchen', 'food_bank', 'mobile_pantry', 'other'] &&
               (!('description' in data) || (data.description is string && data.description.size() <= 500)) &&
               (!('schedule' in data) || data.schedule is map) &&
               (!('capacity' in data) || data.capacity is number);
      }
    }
    
    // Reviews collection - authenticated users can create, read public
    match /reviews/{reviewId} {
      allow read: if true; // Public read access for reviews
      
      allow create: if isAuthenticated() && 
                      isOwner(resource.data.userId) &&
                      isValidReviewData(resource.data) &&
                      withinRateLimit();
      
      allow update: if isAuthenticated() && 
                      (isOwner(resource.data.userId) || isAdmin()) &&
                      isValidReviewData(resource.data);
      
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.userId) || isAdmin());
      
      function isValidReviewData(data) {
        return data.keys().hasAll(['userId', 'locationId', 'rating', 'createdAt']) &&
               data.userId is string &&
               data.locationId is string &&
               data.rating is number && data.rating >= 1 && data.rating <= 5 &&
               data.createdAt is timestamp &&
               (!('comment' in data) || (data.comment is string && data.comment.size() <= 500)) &&
               (!('visitDate' in data) || data.visitDate is timestamp);
      }
    }
    
    // Updates collection - real-time status updates
    match /updates/{updateId} {
      allow read: if true; // Public read access for status updates
      
      allow create: if isAuthenticated() && 
                      (isProvider() || isAdmin()) &&
                      isValidUpdateData(resource.data);
      
      allow update: if isAdmin(); // Only admins can modify existing updates
      
      allow delete: if isAdmin(); // Only admins can delete updates
      
      function isValidUpdateData(data) {
        return data.keys().hasAll(['locationId', 'status', 'updatedBy', 'timestamp']) &&
               data.locationId is string &&
               data.status in ['open', 'closed', 'limited'] &&
               data.updatedBy is string &&
               data.timestamp is timestamp &&
               (!('notes' in data) || (data.notes is string && data.notes.size() <= 200)) &&
               (!('foodAvailable' in data) || data.foodAvailable is bool);
      }
    }
    
    // Community Collections

    // Forum posts - authenticated users can create, public read
    match /forum_posts/{postId} {
      allow read: if true; // Public read access
      
      allow create: if isAuthenticated() && 
                      isOwner(resource.data.authorId) &&
                      isValidForumPostData(resource.data);
      
      allow update: if isAuthenticated() && 
                      (isOwner(resource.data.authorId) || isAdmin()) &&
                      isValidForumPostData(resource.data);
      
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.authorId) || isAdmin());
      
      function isValidForumPostData(data) {
        return data.keys().hasAll(['title', 'content', 'authorId', 'authorName', 'category']) &&
               data.title is string && data.title.size() > 0 && data.title.size() <= 100 &&
               data.content is string && data.content.size() > 0 && data.content.size() <= 2000 &&
               data.authorId is string &&
               data.authorName is string && data.authorName.size() > 0 &&
               data.category in ['general', 'resources', 'local', 'support', 'providers'] &&
               (!('tags' in data) || data.tags is list);
      }
    }

    // Forum replies
    match /forum_replies/{replyId} {
      allow read: if true; // Public read access
      
      allow create: if isAuthenticated() && 
                      isOwner(resource.data.authorId) &&
                      isValidForumReplyData(resource.data);
      
      allow update: if isAuthenticated() && 
                      (isOwner(resource.data.authorId) || isAdmin());
      
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.authorId) || isAdmin());
      
      function isValidForumReplyData(data) {
        return data.keys().hasAll(['postId', 'content', 'authorId', 'authorName']) &&
               data.postId is string &&
               data.content is string && data.content.size() > 0 && data.content.size() <= 1000 &&
               data.authorId is string &&
               data.authorName is string && data.authorName.size() > 0;
      }
    }

    // Volunteer opportunities
    match /volunteer_opportunities/{opportunityId} {
      allow read: if true; // Public read access
      
      allow create: if isAuthenticated() && 
                      isOwner(resource.data.createdBy) &&
                      isValidVolunteerOpportunityData(resource.data);
      
      allow update: if isAuthenticated() && 
                      (isOwner(resource.data.createdBy) || isAdmin());
      
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.createdBy) || isAdmin());
      
      function isValidVolunteerOpportunityData(data) {
        return data.keys().hasAll(['title', 'description', 'organization', 'location', 'contactEmail', 'createdBy']) &&
               data.title is string && data.title.size() > 0 && data.title.size() <= 100 &&
               data.description is string && data.description.size() > 0 && data.description.size() <= 2000 &&
               data.organization is string && data.organization.size() > 0 &&
               data.location is string && data.location.size() > 0 &&
               isValidEmail(data.contactEmail) &&
               data.createdBy is string;
      }
    }

    // Community events
    match /community_events/{eventId} {
      allow read: if true; // Public read access
      
      allow create: if isAuthenticated() && 
                      isOwner(resource.data.createdBy) &&
                      isValidCommunityEventData(resource.data);
      
      allow update: if isAuthenticated() && 
                      (isOwner(resource.data.createdBy) || isAdmin());
      
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.createdBy) || isAdmin());
      
      function isValidCommunityEventData(data) {
        return data.keys().hasAll(['title', 'description', 'organization', 'date', 'location', 'address', 'contactEmail', 'createdBy']) &&
               data.title is string && data.title.size() > 0 && data.title.size() <= 100 &&
               data.description is string && data.description.size() > 0 && data.description.size() <= 2000 &&
               data.organization is string && data.organization.size() > 0 &&
               data.date is timestamp &&
               data.location is string && data.location.size() > 0 &&
               data.address is string && data.address.size() > 0 &&
               isValidEmail(data.contactEmail) &&
               data.createdBy is string;
      }
    }

    // Community resources
    match /community_resources/{resourceId} {
      allow read: if true; // Public read access
      
      allow create: if isAuthenticated() && 
                      isOwner(resource.data.authorId) &&
                      isValidCommunityResourceData(resource.data);
      
      allow update: if isAuthenticated() && 
                      (isOwner(resource.data.authorId) || isAdmin());
      
      allow delete: if isAuthenticated() && 
                      (isOwner(resource.data.authorId) || isAdmin());
      
      function isValidCommunityResourceData(data) {
        return data.keys().hasAll(['title', 'description', 'category', 'type', 'authorId', 'authorName']) &&
               data.title is string && data.title.size() > 0 && data.title.size() <= 100 &&
               data.description is string && data.description.size() > 0 && data.description.size() <= 2000 &&
               data.category in ['government', 'local', 'transportation', 'family', 'national', 'housing', 'healthcare', 'education'] &&
               data.type in ['guide', 'website', 'document', 'video', 'contact'] &&
               data.authorId is string &&
               data.authorName is string && data.authorName.size() > 0;
      }
    }

    // Community engagement (likes, shares, etc.)
    match /community_engagement/{engagementId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      
      allow create: if isAuthenticated() && 
                      isOwner(resource.data.userId) &&
                      isValidEngagementData(resource.data);
      
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
      
      function isValidEngagementData(data) {
        return data.keys().hasAll(['userId', 'targetId', 'targetType', 'action']) &&
               data.userId is string &&
               data.targetId is string &&
               data.targetType in ['post', 'reply', 'resource', 'event', 'opportunity'] &&
               data.action in ['like', 'save', 'share', 'report', 'view'];
      }
    }

    // Community stats - read only for users, write for admins
    match /community_stats/{statsId} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins can write stats
    }

    // Admin collection - restrict access to admin users only
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
    
    // Analytics collection - admin access only
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // System configuration - admin access only
    match /config/{document=**} {
      allow read, write: if isAdmin();
    }
  }
} 